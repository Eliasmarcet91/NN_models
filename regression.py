# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1to5Ds9eWD-qy5BKUgWJAXg0PePt1Uwgc
"""

# mlp for regression
from numpy import sqrt
from pandas import read_csv
from sklearn.model_selection import train_test_split
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Dense
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder

# load the dataset
path = "https://raw.githubusercontent.com/Eliasmarcet91/datasets/main/Salary_dataset.csv"
df = read_csv(path, header=1)

df.head()
df.dropna()
df.drop(df.columns[0], axis=1)

# Ensure all data are floating point values
# X = X.astype('float32')

# Split into input and output columns
X, y = df.values[:, :-1], df.values[:, -1]

# Split into train and test datasets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33)

# Determine the number of input features
n_features = X_train.shape[1]

# Define model
model = Sequential()
model.add(Dense(150, activation='relu', kernel_initializer='he_normal', input_shape=(n_features,)))
model.add(Dense(100, activation='relu', kernel_initializer='he_normal'))
model.add(Dense(8, activation='relu', kernel_initializer='he_normal'))
model.add(Dense(1))

# Compile the model
model.compile(optimizer='adam', loss='mse')

# Fit the model
model.fit(X_train, y_train, epochs=100, batch_size=5, verbose=0)

# Evaluate the model
error = model.evaluate(X_test, y_test, verbose=0)
print('MSE: %.3f, RMSE: %.3f' % (error, sqrt(error)))

# Make a prediction

# Make a prediction
row = [[10, 3.3]]  # Ensure input data is in the correct format (2D array)
print(row)
yhat = model.predict(row)
print('Predicted: %.3f' % yhat[0][0])  # Access the prediction value from the result

model.save('reg_model.h5')