# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1to5Ds9eWD-qy5BKUgWJAXg0PePt1Uwgc
"""

# mlp for multiclass classification
from numpy import argmax
from pandas import read_csv
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Dense
from keras.optimizers import Adam
from keras.regularizers import l2
from keras.layers import Dropout


# load the dataset
path = 'https://raw.githubusercontent.com/Eliasmarcet91/datasets/main/data.csv'

# df = read_csv(path, header=None)
df = read_csv(path, header=1, sep= ';') #if the data doesnt look good ensure you reference the CSV delimiter character
# split into input and output columns
X, y = df.values[:, :-1], df.values[:, -1]
df.head()
# Data Preprocessing
# encode strings to integer
encoder = LabelEncoder()
y = encoder.fit_transform(y)

mapping = dict(zip(encoder.classes_, range(len(encoder.classes_))))
print(mapping)

X = X.astype('float32')

# split into train and test datasets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33)
print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)

# Define the input shape as a tuple
input_shape = (X_train.shape[1],)  # Use the number of features as the input shape


# Define model
# Define model with L2 regularization
model = Sequential()
model.add(Dense(100, activation='relu', kernel_initializer='he_normal',input_shape=input_shape))
model.add(Dense(50, activation='relu', kernel_initializer='he_normal')),
model.add(Dense(8, activation='relu', kernel_initializer='he_normal')),
model.add(Dense(3, activation='softmax'))



# compile the model
optimizer = Adam(learning_rate=0.01)
model.compile(optimizer=optimizer, loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# fit the model
model.fit(X_train, y_train, epochs=15, batch_size=10, verbose=1)

# evaluate the model
loss, acc = model.evaluate(X_test, y_test, verbose=0)
print('Test Accuracy: %.3f' % acc)



# make a prediction
row = [1,10,1,911,1,1,10.0,1,1,3,5,5,1.4,0,0,0,0,0,0,0,0,0,6,0,0,1.0,0,0,0,0,0,13.8,0,12.4,0.5,0.79]
model_prediction = model.predict([row])
print('Predicted: %s (class=%d)' % (model_prediction, argmax(model_prediction)))

model.save('multiclass_model.h5')